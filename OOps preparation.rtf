{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\tx90\tx360\tx540\tx810\tx9630\f0\fs48\lang9        "Interview question Preparation"\par

\pard\sa200\sl276\slmult1\tx540\tx810\fs36 Q1: What is  difference between OOPs and SOP?\par
Ans:\fs28 OOPs stands  for object oriented programinmg .\par
2: In computer programing they can relies the concept of class and object\par
3: They can provide data hiding\par
4: They  can solve problems of any complexity.\par
\fs40 SOP:\par
\fs28 1: Standard Operating Procedure\par
2: They can provides logical structure in a program where the  programs are divided into functions.\par
3:They does not provide data hiding.\par
4:They can  solve moderate problems.\par
Q2:What is Object Oriented Programming?\par
Ans. OOPs is a programing that organizes software design around objects and classes.  OOPs implements real-world entities like inheritance, polymorphism, hiding, etc into programming.   \par
Q3: Why use OOPs? \par
Ans: 1: OOPs provide  a clear structure in the program.\par
 2: OOPs  is faster and easier to execute. \par
3: They makes the code easier to maintain, modify and debug.\par
 4: OOP helps to keep the C++ code and donot repeat the yourself.\par
Q4: What are the main features of OOPs?   \par
Ans: Inheritance\par
Encapsulation\par
Polymorphism\par
Data Abstraction\par
Q5: What is an object?\par
An object is a real-world entity which is the basic unit of OOPs for example chair, cat, dog, etc. Different objects have different attributes, and behaviors. \par
Q6: What is a Class? \par
 A class is a blueprint or a templates that defines the properties and  behaviours of a object.  It classifies and defines the structure of objects. It is a fundamental unit in object-oriented programming.\par
Q7:  What is the difference between a class and a structure?\par
Class:\par
A classs  is a blueprint or a  templates that defines the properties and  behaviours of a object. \par
Structure:\par
 A structure is basically  user-defined collection of variables which are of different data types.             \par
Q8:  Can you call the base class method without creating an instance?\par
Yes, you can call the base class without instantiating .\par
It is a static method\par
The base class is inherited by some other subclass\par
Q9: What is the difference between a class and an object?\par
Ans:                     CLASS\par
A class is a blueprint or a templates that defines the properties and behaviours of a object.\par
A class is a logical entity.\par
A class does not take memory space when created.\par
Classes are declared just once.\par
                             Objects\par
A real-world entity which is an instance of a class.\par
An object is a physical entity.\par
Objects take memory space when they are created.\par
Objects can be declared as and when required.\par
10. What is inheritance?\par
Ans: Inheritance is a feature of OOPs which allows classes inherit common properties from other classes. For example, if there is a class such as \lquote vehicle\rquote , other classes like \lquote car\rquote , \lquote bike\rquote , etc can inherit common properties from the vehicle class.\par
11. What are the different types of inheritance?\par
Single inheritance\par
Multiple inheritance\par
Multilevel inheritance\par
Hierarchical inheritance\par
Hybrid inheritance\par
12. What is the difference between multiple and multilevel inheritance?\par
Ans: Multiple inheritance:\par
The child class inheritic of multiple parent class \par
Example: A child inherits of two base class Mother and father.\par
    Multilevel inheritance:\par
The  parent class is  derived of another class.\par
eg  A sports car will inherit from a base class Car which inturn inherits another class Vehicle.\par
13. What is hybrid inheritance?\par
Ans: Hybrid inheritance is a combination of multiple and multi-level inheritance.\par
14. What is hierarchical inheritance?\par
Ans:   Hierarchical inheritance refers to inheritance where one base class has more than one subclasses. \par
For example, the vehicle class can have \lquote car\rquote , \lquote bike\rquote , etc as its subclasses.\par
15:What are the limitations of inheritance?\par
Ans: Inheritance is a powerful tool in object-oriented programming, but it is not without its limitations. The  base class problem, tight coupling, multiple inheritance, inflexibility, and overriding are all limitations of inheritance.\par
16. What is a superclass?\par
A superclass is a class that acts as a parent to some other class or classes. For example, the Vehicle class is a superclass of class Car\par
17. What is a subclass?\par
A class that inherits from another class is called the subclass. For example, the class Car is a subclass or a derived of Vehicle class.\par
18: What is a polymorphism?\par
Ams:  refers to the ability of a single interface that operate on different data types or classes. This is especially useful in making code more flexible and reusable.\par
19. What is static polymorphism?\par
Static polymorphism (static binding) is a kind of polymorphism that occurs at compile time. An example of compile-time polymorphism is method overloading.\par
20. What is dynamic polymorphism?\par
Ans: Dynamic polymorphism is a type of polymorphism which is resolved during runtime. An example of runtime polymorphism is method overriding.\par
21. What is overloading?\par
Ans: Function overloading is the ability to create multiple functions of the same name but parameter has different\par
\f1 22. What \f0\lang1033 is \f1  overriding?\par
\f0 Ans: Overriding is a fundamental concept in OOPs where a subclass are provide specific implementation that are already defined in superclas/base class\par
24. Differentiate between overloading and overriding.\par
Ans: Overloading\tab\par
1: Two or more methods that have  the same name but  parameters are different.\par
2: Resolved during compile-time.\par
Overriding:\par
1: Child class redefining methods present in the base class with the same parameter.\par
2: \tab Resolved during runtime.\par
25. What is encapsulation?\par
Ans: Encapsulation refers to binding the data and  code that works on that together in a single unit. \par
26. What are \lquote access specifiers\rquote ?\par
Ans: Access specifiers are keywords that determine the accessibility of methods, classes, etc in OOPs. These access specifiers allow the implementation of encapsulation. The most common access specifiers are public, private and protected.\par
27. What is the difference between public, private and protected access modifiers?\par
Ans: Public can be accessed from anywhere in the program.\par
        Private can only be accessed from within the same class.\par
       Protected can be accessed by the class  and derived (subclass)\par
      but they are not accessible from outside the class.\par
28. What is data abstraction?\par
Ans: Data abstraction is a very important feature of OOPs that allows on displaying only the important information and hiding the implementation details.  \par
29. How to achieve data abstraction?\par
Ans: Data abstraction can be achieved through:\par
Abstract class\par
Abstract method\par
30. What is Abstract class?\par
Ans: An abstract class is a class that consists of abstract methods. These methods are basically declared but not defined. If these methods are to be used in some subclass\par
31. Can you create an instance of an abstract class?\par
Ans: No. Instances of an abstract class cannot be created because it does not have a complete implementation. However, instances of subclass inheriting the abstract class can be created.\par
32. What is an interface?\par
Ans: An interface is define a contract or  blueprint for class to follow . it specifies a set of methods that must be implemented by any class that implements it.\par
33. Differentiate between data abstraction and encapsulation.\par
 Ans: Data abstraction:\par
1: Solves the problem at the design level\par
2: Allows showing important aspects while hiding implementation details\par
Encapsulation:\par
\tab 1: Solves the problem at the implementation level.\par
2: Binds code and data together into a single unit and hides from the world.\par
34. What are virtual functions?\par
Ans: Virtual functions are functions that are present in the parent class . These functions are used to achieve runtime polymorphism.\par
35. What are pure virtual functions?\par
Ans: Pure virtual functions is a  functions that are only declared in the base class. This means that they do not define the base class and need to be redefined in the subclass.\par
36. What is a constructor?\par
Ans: A constructor is a special member function that is automatically called when an object is created. It is used to initialize the object.\par
37. What is a destructor?\par
Ans: A destructor is a special member funtion  that is automatically called  when an object is destroyed.  It cannot take any parameters.\par
38. How are the Types of constructors.\par
Ans: The following are the types of constructors.\par
Default constructor\par
Parameterized constructor\par
Copy constructor\par
39. What is a copy constructor?\par
Ans: A copy constructor creates an  objects by copying variables from another object of the same class. \par
42. Differentiate between a class and a method.\par
Ans: CLass:\par
A class is a blueprint for creating objects (instances). It defines the properties and behaviour of an object .\par
Method: \par
 A method is a function  within a class that describes an action that an object of the class can perform.                \par
43.  What are some commonly used Object Oriented Programming Languages?\par
OOPs paradigm is one of the most popular programming paradigms. It is widely used in many popular programming languages such as:\par
C++\par
Java\par
Python\par
JavaScript\par
C#\par
Ruby\par
44. How much memory does a class occupy?\par
Ans: Classes do not use memory. They  serve as a template from which items are made. \par
45. Can we overload the constructor in a class?\par
Ans: Yes , We can overload the constructor in a class in C++. when we want constructor with different numbers with different parameter(Number and Type).\par
46. Can we overload the destructor in a class?\par
No, a destructor cannot be overloaded in a class. There can only be one destructor present in a class.\par
47: 10. How is data abstraction accomplished?\par
Data abstraction is accomplished with the help of abstract methods or abstract classes.\par
\par
}
 